# perl highlighting

LIBC       = shared
#MAPFILES   = 1
CONSOLE    = 1

!if !defined($OPTIMIZE)		# allow overriding of OPTIMIZE in parent project
OPTIMIZE   = size
!endif

PDB        = 2				# keep enabled, executable is almost the same, except embedded link to pdb file

!if !defined($OLDCRT)		# allow overriding of OLDCRT in parent project
OLDCRT     = 1				# OLDCRT=0 is required for VS2015+ (TODO: try to fix that)
!endif


#------------------------------------------------
#	Compiler-specific options
#------------------------------------------------

STDDEFS    =				# common defines
WARNINGS   =				# warnings for our source code (i.e. excluding thirs-parties), empty by default

!if "$COMPILER" eq "VisualC"
	!if !defined($CPP_EXCEPT)
		CPP_EXCEPT = 0									# used with WIN32_USE_SEH in Core.h
	!endif
	WINXP      = 1										# we're not using any modern Win32 features, so allow to worn at WinXP
	OPTIONS = -GS- -GR-
#	WARNINGS += -W4										# maximal warning level for Visual C++
	WDKCRT = $R/../Libs/msvcrt
	!if "$OLDCRT" eq "1" && -e "$WDKCRT/msvcrt.project"
		STDDEFS += OLDCRT								# used in code to distinguish which functions are available
		STDDEFS += _NO_CRT_STDIO_INLINE					# UCRT (VS 2015+): without that, all printf functions will use some "common" function
		!include $WDKCRT/msvcrt.project
		!if "$VC_VER" >= 2015							# support for OLDCRT with modern compliers
			OPTIONS += -Zc:threadSafeInit-				# disable calls to C++11 thread-safe static object initializers
			STDDEFS += _ACRTIMP_ALT=					# remove dllimport from some CRT functions (there're just a few)
		!endif
	!endif
	LINKFLAGS += -largeaddressaware						# allow 32-bit build to use more than 2Gb or RAM
!endif

!if "$COMPILER" eq "GnuC"
	# linux/cygwin + GCC
	STDLIBS   = stdc++ m GL 							# libm for math.h functions
	!if "$PLATFORM" ne "cygwin"
		STDLIBS += dl	# dlopen() and friends
	!endif

	LIBC      = shared
	OPTIONS   = -msse2									# enable SSE instructions
	OPTIONS   += -fno-strict-aliasing					# required for our uint_cast()-based FP hacks
	OPTIONS   += -fno-stack-protector					# this will remove GLIBC_2.4 dependency
	OPTIONS   += {
		# enable some warnings
		-Wunused-value									# warning about expression which is occasionally typed in code and not used anywhare
	}
	CPP_OPTIONS += -std=c++0x							# allow C++11 features (Warning!! - C++ only option)
	CPP_OPTIONS += -Wno-invalid-offsetof
!endif

# GCC debug build
!if ("$COMPILER" eq "GnuC") && 0
	#!! should disable "-s" option from linker command
	OPTIONS += -g3 -fno-omit-frame-pointer -funwind-tables -fstack-protector -fno-optimize-sibling-calls
	LINKFLAGS += -rdynamic
!endif


DEFINES = $STDDEFS
#OPTIONS += -analyze

#------------------------------------------------
#	Third-party libraries
#------------------------------------------------

LIBINCLUDES = $R/libs/include $R/libs

OBJDIR = $R/obj/libs-$PLATFORM

push(INCLUDES)
INCLUDES = $R/libs/nvtt
LIBINCLUDES += $R/libs/nvtt

sources(NV_LIBS) = {
#	$R/libs/nvtt/nvcore/*.cpp
	$R/libs/nvtt/nvimage/*.cpp
#	$R/libs/nvtt/nvmath/*.cpp
#	$R/libs/nvtt/nvtt/bc6h/*.cpp
#	$R/libs/nvtt/nvtt/bc7/*.cpp
}

pop(INCLUDES)


# defines for smaller zlib
push(DEFINES)
push(INCLUDES)

DEFINES = $STDDEFS MY_ZCALLOC DYNAMIC_CRC_TABLE BUILDFIXED NO_GZIP
INCLUDES = $R/libs/include

# compression libraries
sources(COMP_LIBS) = {
	# ... lzo for compressed UE3 packages
	$R/libs/lzo/lzo_init.c
	$R/libs/lzo/lzo1x_d2.c
	# ... zlib for compressed UE3/UE4 packages
	$R/libs/zlib/*.c
	# ... lzx for compressed XBox360 UE3 packages
	$R/libs/mspack/lzxd.c
	# ... lz4 for Gears of War 4
	$R/libs/lz4/lz4.c
}

# ... PNG for compressed source textures
INCLUDES += $R/libs/zlib
DEFINES = $STDDEFS PNG_USER_CONFIG
sources(IMG_LIBS) = {
	$R/libs/libpng/*.c
}

pop(INCLUDES)
pop(DEFINES)


sources(MOBILE_LIBS) = {
	$R/libs/PowerVR/*.cpp
	$R/libs/astc/*.cpp
}
LIBINCLUDES += $R/libs/PowerVR


LIBINCLUDES += $R/libs/detex
sources(IMG_LIBS) = {
	$R/libs/detex/*.cpp
}

LIBINCLUDES += $R/libs/rijndael
sources(UE4_LIBS) = {
	$R/libs/rijndael/*.c
}


#------------------------------------------------
#	Project-specific options
#------------------------------------------------

OBJDIR     = $R/obj/$PRJ-$PLATFORM
STDLIBS   += SDL2
INCLUDES  += . $R/Core $R/Unreal $LIBINCLUDES
OPTIONS   += $WARNINGS

!if defined($DEBUG)
	DEFINES += MAX_DEBUG
	OBJDIR  = $OBJDIR-debug
	OPTIMIZE = none
!endif

!if "$PLATFORM" eq "win32"
	INCLUDES += $R/libs/includewin32
	LIBRARIES = $R/libs/SDL2/x86
!elif "$PLATFORM" eq "win64"
	INCLUDES += $R/libs/includewin32
	LIBRARIES = $R/libs/SDL2/x64
!endif
